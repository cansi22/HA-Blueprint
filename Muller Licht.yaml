blueprint:
  name: ZHA - Muller Licht Remote Control
  description: |
    Control lights with a Philips Muller Licht Remote Control.
  domain: automation
  source_url: https://raw.githubusercontent.com/cansi22/HA-Blueprint/main/Muller%20Licht.yaml

  # Define the inputs for the blueprint
  input:
    remote:
      name: Muller Licht Remote Control
      description: Pick either 404010 (Black) or R404011 (White)
      selector:
        device:
          integration: zha
          manufacturer: MLI
          model: ZBT-Remote-ALL-RGBW
          multiple: false

    light:
      name: The light(s) to control
      description: >
        The light entity to control
        (only a single entity is supported; use light groups when needed)
      selector:
        entity:
          domain: light
    
mode: restart
max_exceeded: silent

variables:
  light              : !input 'light'

# Trigger the automation when the selected dimmer remote sends an event
# Also only trigger on cluster_id 64512. This ignores the 'old' events with cluster_id 8.
trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input 'remote'

action:
  - variables:
      command        : '{{ trigger.event.data.command }}'
      cur_brightness : '{{ state_attr(light, ''brightness'') | int }}'
      is_turned_on   : '{{ states(light) == ''on'' }}'
  
  - choose:
    # Encender Luz "on / off"
    - conditions: '{{ command == ''on'' or command == ''off''}}'
      sequence:
      - service: light.toggle
        data:
          entity_id : !input 'light'

    # Subir brillo con pulsación "step" "params.step_mode = 0"
    - conditions: '{{ command == ''step'' and params.step_mode == ''0''}}'
      sequence:
      - service: light.turn_on
        data:
          entity_id : !input 'light'
          brightness_step: 20
          transition: 1

    # Bajar brillo con pulsación "step" "params.step_mode = 1"
    - conditions: '{{ command == ''step'' and params.step_mode == ''1''}}'
      sequence:
      - service: light.turn_on
        data:
          entity_id : !input 'light'
          brightness_step: -20
          transition: 1
    
    # Subir brillo manteniendo "move" -> cuando sueltas "move" "params.move_mode = 0"
    - conditions: '{{ command == ''move'' and params.move_mode == ''0''}}'
      sequence:
      - service: light.turn_on
        data:
          entity_id : !input 'light'
          brightness_step: -20
          transition: 1

    # Bajar brillo manteniendo "move" -> cuando sueltas "move" "params.move_mode = 1"
    - conditions: '{{ command == ''move'' and params.move_mode == ''1''}}'
      sequence:
      - service: light.turn_on
        data:
          entity_id : !input 'light'
          brightness_step: -20
          transition: 1

    # Cambiar temperatura luz "move_to_color_temp" warm white, neutral white and cold white.
    - conditions: '{{ command == ''move_to_color_temp''}}'
      sequence:
      - service: light.turn_on
        data:
          color_temp: "{{ params.color_temp_mireds }}"
    # Cambiar color "move_to_color"
    - conditions: '{{ command == ''move_to_color''}}'
      sequence:
      - service: light.turn_on
        data:
          xy_color: 
            - "{{ params.color_x}}"
            - "{{ params.color_y}}"