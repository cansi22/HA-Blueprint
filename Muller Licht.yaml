blueprint:
  name: ZHA - Muller Licht Remote Control
  description: Control lights with a Philips Muller Licht Remote Control.
  domain: automation
  source_url: https://raw.githubusercontent.com/cansi22/HA-Blueprint/main/Muller%20Licht.yaml

  # Define the inputs for the blueprint
  input:
    remote:
      name: Muller Licht Remote Control
      description: Pick either 404010 (Black) or R404011 (White)
      selector:
        device:
          integration: zha
          manufacturer: MLI
          model: ZBT-Remote-ALL-RGBW
          multiple: false

    light:
      name: The light(s) to control
      description: >
        The light entity to control
        (only a single entity is supported; use light groups when needed)
      selector:
        entity:
          domain: light
    
mode: restart
max_exceeded: silent

# Trigger the automation when the selected dimmer remote sends an event
trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input 'remote'
# 
# action:
# - choose:
#   # Encender Luz "on / off"
#   - conditions: '{{ command == ''on'' or command == ''off''}}'
#     sequence:
#     - service: light.toggle
#       target: !input 'light'
#       data:
#         transition: 1
#   # Subir brillo con pulsación "step" "params.step_mode = 0"
#   - conditions: '{{ command == ''step'' and params.step_mode == ''0''}}'
#     sequence:
#     - service: light.turn_on
#       target: !input 'light'
#       data:
#         brightness_step_pct: +10
#         transition: 1
#   # Bajar brillo con pulsación "step" "params.step_mode = 1"
#   - conditions: '{{ command == ''step'' and params.step_mode == ''1''}}'
#     sequence:
#     - service: light.turn_on
#       target: !input 'light'
#       data:
#         brightness_step_pct: -10
#         transition: 1
#   
#   # Subir brillo manteniendo "move" -> cuando sueltas "move" "params.move_mode = 0"
#   - conditions: '{{ command == ''move'' and params.move_mode == ''0''}}'
#     sequence:
#     - repeat:
#         count: 10
#         sequence:
#         - service: light.turn_on
#           target: !input 'light'
#           data:
#             brightness_step_pct: 10
#             transition: 1
#         - delay: 1
#   # Bajar brillo manteniendo "move" -> cuando sueltas "move" "params.move_mode = 1"
#   - conditions: '{{ command == ''move'' and params.move_mode == ''1''}}'
#     sequence:
#     - repeat:
#         count: 10
#         sequence:
#         - service: light.turn_on
#           target: !input 'light'
#           data:
#             brightness_step_pct: -10
#             transition: 1
#         - delay: 1
#   # Cambiar temperatura luz "move_to_color_temp" warm white, neutral white and cold white.
#   - conditions: '{{ command == ''move_to_color_temp''}}'
#     sequence:
#     - service: light.turn_on
#       target: !input 'light'
#       data:
#         color_temp: "{{ params.color_temp_mireds }}"
#   # Cambiar color "move_to_color"
#   - conditions: '{{ command == ''move_to_color''}}'
#     sequence:
#     - service: light.turn_on
#       target: !input 'light'
#       data:
#         xy_color: 
#           - "{{ params.color_x}}"
#           - "{{ params.color_y}}"